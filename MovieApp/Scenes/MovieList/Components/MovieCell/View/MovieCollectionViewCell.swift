//
//  MovieCollectionViewCell.swift
//  MovieApp
//
//  Created by ibaikaa on 17/4/23.
//

import UIKit
import SnapKit
import Kingfisher
import Cosmos

final class MovieCollectionViewCell: UICollectionViewCell {
    /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è—á–µ–π–∫–∏
    static let identifier = String(describing: MovieCollectionViewCell.self)
  
    // MARK: - UI-—ç–ª–µ–º–µ–Ω—Ç—ã.
    private lazy var posterImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.contentMode = .scaleAspectFill
        imageView.backgroundColor = .clear
        imageView.layer.cornerRadius = 12
        imageView.clipsToBounds = true
        imageView.tintColor = .systemYellow
        return imageView
    }()
    
    private lazy var backgroundViewContainer: UIView = {
        let view = UIView()
        view.backgroundColor = .movieViewBackgroundColor
        view.layer.cornerRadius = 16
        return view
    }()
    
    private lazy var movieInfoLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont(name: "AvenirNext-Bold", size: 18)
        label.textColor = .white
        label.numberOfLines = 2
        return label
    }()
    
    private lazy var ratingStarsView: CosmosView = {
        var settings = CosmosSettings()
        
        // –®—Ä–∏—Ñ—Ç –∏ —Ü–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        settings.textFont = UIFont(name: "AvenirNext-Regular", size: 16)!
        settings.textColor = .ratingColor
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–≤–µ–∑–¥–æ—á–µ–∫
        settings.fillMode = .precise
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∑–≤–µ–∑–¥–æ—á–µ–∫
        settings.filledColor = .ratingColor
        settings.emptyBorderColor = .ratingColor
        settings.filledBorderColor = .ratingColor
        
        // –°–æ–∑–¥–∞–Ω–∏–µ CosmosView
        let cosmosView = CosmosView(settings: settings)
        
        // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        cosmosView.isUserInteractionEnabled = false
        
        return cosmosView
    }()
    
    private lazy var directorNameLabel: UILabel = {
        let label = UILabel()
        label.font = UIFont(name: "AvenirNext-Regular", size: 14)
        label.numberOfLines = 2
        label.textColor = .white
        return label
    }()
    
    private lazy var rankEmojiLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 30)
        label.isHidden = true
        return label
    }()

    // MARK: - setupSubviews(). –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (constraints) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ Snapkit.
    private func setupSubviews() {
        addSubview(backgroundViewContainer)
        backgroundViewContainer.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(30)
            make.left.right.bottom.equalToSuperview()
        }
        
        addSubview(posterImageView)
        posterImageView.snp.makeConstraints { make in
            make.top.equalTo(backgroundViewContainer.snp.top).offset(-20)
            make.left.equalTo(backgroundViewContainer.snp.left).offset(20)
            make.bottom.equalTo(backgroundViewContainer.snp.bottom).offset(-20)
            make.width.equalTo(bounds.width / 3)
        }
        
        addSubview(movieInfoLabel)
        movieInfoLabel.snp.makeConstraints { make in
            make.top.equalTo(backgroundViewContainer.snp.top).offset(20)
            make.left.equalTo(posterImageView.snp.right).offset(20)
            make.right.equalTo(backgroundViewContainer.snp.right).offset(-30)
        }
        
        addSubview(ratingStarsView)
        ratingStarsView.snp.makeConstraints { make in
            make.top.equalTo(movieInfoLabel.snp.bottom).offset(10)
            make.left.equalTo(posterImageView.snp.right).offset(20)
            make.right.equalTo(backgroundViewContainer.snp.right).offset(-10)
        }
        
        addSubview(directorNameLabel)
        directorNameLabel.snp.makeConstraints { make in
            make.top.equalTo(ratingStarsView.snp.bottom).offset(20)
            make.left.equalTo(posterImageView.snp.right).offset(20)
            make.right.equalTo(backgroundViewContainer.snp.right).offset(-30)
        }
        
        addSubview(rankEmojiLabel)
        rankEmojiLabel.snp.makeConstraints { make in
            make.top.equalTo(backgroundViewContainer.snp.top).offset(-5)
            make.right.equalTo(backgroundViewContainer.snp.right).offset(-3)
        }
    }
        
    // MARK: - layoutSubviews().
    override func layoutSubviews() {
        super.layoutSubviews()
        setupSubviews()
    }
    
    // MARK: - For configuring data for cell.
        
    /**
     –î–∞–Ω–Ω—ã–µ (—ç–Ω–¥–ø–æ–∏–Ω—Ç `crew` –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –≤–∏–¥–µ: "–ò–º—è –§–∞–º–∏–ª–∏—è (–¥–∏—Ä.), –ê–∫—Ç–µ—Ä 1, –ê–∫—Ç–µ—Ä 2"
     –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–∂–∏—Å—Å–µ—Ä–∞.
     –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ—à–∞–µ—Ç –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É,
     ‚Äì –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π —Ä–µ–∂–∏—Å—Å–µ—Ä–∞.
     */
    
    private func getDirector(crew: String) -> String {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—É—Å—Ç–∞—è –ª–∏ —Å—Ç—Ä–æ–∫–∞.
        guard !crew.isEmpty else { return "No Data" }
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —Ä–µ–∂–∏—Å–µ—Ä–∞.
        let firstPerson = crew.components(separatedBy: ",")[0]
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        let firstPersonName = firstPerson.components(separatedBy: " ")[0]
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏
        let firstPersonLastName = firstPerson.components(separatedBy: " ")[1]
        // –ß–µ—Ä–µ–∑ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –ø—Ä–æ–±–µ–ª–æ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
        return firstPersonName + " " + firstPersonLastName
    }
    
    /// –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–∞–π–ª–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ place. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –ø–æ —Ä–∞–Ω–≥—É —Ñ–∏–ª—å–º–æ–≤.
    private func getRankEmoji(for place: Int) -> String {
        switch place {
        case 1: return "ü•á"
        case 2: return "ü•à"
        case 3: return "ü•â"
        default: return ""
        }
    }
    
    /**
     –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏—Ö–æ–¥—è—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `movie` —Ç–∏–ø–∞` Item`.
     */
    public func configure(with movie: Item) {
        /// –ò—Å–ø–æ–ª—å–∑—É—é `kf` –¥–ª—è —É–¥–æ–±–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL.
        posterImageView.kf
            .setImage(
                with: URL(string: movie.posterPath ?? "" ),
                placeholder: UIImage(systemName: "popcorn.circle.fill")
            )
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ª–µ–π–±–ª–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é. –í—Å–∫—Ä—ã–≤–∞—é –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–∞–ª–∏–∑–∏—é.
        movieInfoLabel.text = "\(movie.title ?? "Movie Name") (\(movie.year ?? "0000"))"
        directorNameLabel.text = "Director: \(getDirector(crew: movie.crew ?? ""))"
        
        /// –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è rank —Ç–∏–ø–∞ Int —á–µ—Ä–µ–∑ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–Ω–∏–º–∞–µ—Ç –ª–∏ –æ–Ω–æ 1-3 –º–µ—Å—Ç–æ.
        if let rank = movie.rank, let rankValue = Int(rank), (1...3).contains(rankValue) {
            rankEmojiLabel.text = getRankEmoji(for: rankValue)
            rankEmojiLabel.isHidden = false
        } else {
            rankEmojiLabel.isHidden = true
        }
        
        guard
            let rating = movie.rating,
            let ratingValue = Double(rating)
        else {
            ratingStarsView.rating = 0
            ratingStarsView.text = "No Data"
            return
        }
        
        ratingStarsView.rating = ratingValue / 2
        ratingStarsView.text = movie.rating
    }
    
}
